<?php
/**
 * Created by PhpStorm.
 * User: YC
 * Date: 2017/4/29
 * Time: 13:59
 */

namespace app\common\controller;

use app\common\api\ConfigApi;
use think\Config;
use think\Controller;
use think\exception\HttpResponseException;
use think\Response;
use think\Url;
use think\View as ViewTemplate;

class BaseCotroller extends Controller
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        //注册配置项
        ConfigApi::config();
    }


    public function _empty()
    {
        $this->redirect('/Admin/Error/index');
    }

    /**
     * 默认操作成功，只有一个参数时为错误信息的错误页面
     * @author yc <cotyxpp@gmail.com>
     * @param null   $code
     * @param null   $msg
     * @param null   $url
     * @param string $data
     * @param int    $wait
     * @param array  $header
     */
    protected final function outInfo($code = null, $msg = null, $url = null, $data = '', $wait = 3, array $header = [])
    {
        if (is_null($code) && is_null($msg)) {
            $code = 1;
            $msg  = '操作成功';
        } elseif ($code && is_null($msg)) {
            $msg  = $code;
            $code = 0;
        }

        //生成url。默认ajax为''
        if (is_null($url) && isset($_SERVER["HTTP_REFERER"])) {
            if ($this->request->isAjax()) {
                $url = '';
            } else {
                if ($code == 1) {
                    $url = $_SERVER["HTTP_REFERER"];
                } else {
                    $url = 'javascript:history.back(-1);';
                }
            }
        } elseif ('' !== $url) {
            $url = (strpos($url, '://') || 0 === strpos($url, '/')) ? $url : Url::build($url);
        }

        //结果数组
        $result = [
            'code' => $code,
            'msg'  => $msg,
            'data' => $data,
            'url'  => $url,
            'wait' => $wait,
        ];

        //非ajax情况下渲染模板
        $type = $this->request->isAjax() ? 'json' : 'html';
        if ($type == 'html') {
            $result = ViewTemplate::instance(Config::get('template'), Config::get('view_replace_str'))
                ->fetch(Config::get('dispatch_success_tmpl'), $result);
        }
        $response = Response::create($result, $type)->header($header);
        throw new HttpResponseException($response);
    }

}